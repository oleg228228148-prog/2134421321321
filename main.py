from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
import logging
import random
import string

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
ADMIN_ID = 7570777211          # üëà –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID
TOKEN = "8320394259:AAELz_qEuaXZgJUHTvO1DjO3FHZVAOjLAFo" # üëà –ó–ê–ú–ï–ù–ò –ù–ê –¢–û–ö–ï–ù –ë–û–¢–ê

# üß† –•—Ä–∞–Ω–∏–ª–∏—â–∞
user_ids = set()              # –∫—Ç–æ –≤–æ–æ–±—â–µ –ø–∏—Å–∞–ª
user_nicknames = {}           # user_id -> "–¢–µ–Ω—å ‚Ññ77"
message_logs = []             # [(user_id, text), ...] ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
active_messages = {}          # msg_id -> {content, type, author_id, reactions}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –Ω–∏–∫–∞
def generate_nickname():
    return f"–¢–µ–Ω—å ‚Ññ{random.randint(10, 999)}"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–µ–∞–∫—Ü–∏–π)
def generate_message_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in user_nicknames:
        nickname = generate_nickname()
        user_nicknames[user.id] = nickname
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} -> {nickname}")

    user_ids.add(user.id)
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_nicknames[user.id]}!\n"
        "–¢—ã –≤ *–ß–∏—Å—Ç–æ–º –ê–Ω–æ–Ω–∏–º–Ω–æ–º –ß–∞—Ç–µ* üé≠\n\n"
        "üìå –ü–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî –≤—Å—ë –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
        "üìå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–æ–º.\n\n"
        "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–≤–æ–±–æ–¥–æ–π –∏ —Ç–∞–π–Ω–æ–π üòâ",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ì–µ–Ω–µ—Ä–∏–º –Ω–∏–∫, –µ—Å–ª–∏ –Ω–µ—Ç
    if user.id not in user_nicknames:
        user_nicknames[user.id] = generate_nickname()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if update.message.text:
        content = update.message.text
        content_type = "text"
    elif update.message.voice:
        content = update.message.voice.file_id
        content_type = "voice"
    else:
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
    msg_id = generate_message_id()
    active_messages[msg_id] = {
        'content': content,
        'type': content_type,
        'author_id': user.id,
        'reactions': []
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞–¥–º–∏–Ω–∞
    sender_info = f"üë§ –ê–≤—Ç–æ—Ä: {user_nicknames[user.id]} (@{user.username or '‚Äî'}) [ID: {user.id}]"
    message_logs.append((user.id, content))  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –†–∞—Å—Å—ã–ª–∞–µ–º –í–°–ï–ú
    broadcast_text = f"üì© *–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* [{msg_id}]\n{content}" if content_type == "text" \
        else f"üì© *–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ* [{msg_id}]"

    for chat_id in list(user_ids):
        try:
            if chat_id == ADMIN_ID:
                full_text = f"üì© *–ê–Ω–æ–Ω–∏–º–∫–∞* [{msg_id}]\n{sender_info}\n\n{content}" if content_type == "text" \
                    else f"üì© *–ì–æ–ª–æ—Å–æ–≤–æ–µ* [{msg_id}]\n{sender_info}"
                await context.bot.send_message(chat_id=chat_id, text=full_text, parse_mode="Markdown")
                if content_type == "voice":
                    await context.bot.send_voice(chat_id=chat_id, voice=content)
            else:
                await context.bot.send_message(chat_id=chat_id, text=broadcast_text, parse_mode="Markdown")
                if content_type == "voice":
                    await context.bot.send_voice(chat_id=chat_id, voice=content)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º. ID: `{msg_id}`", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∫–∞–∫ —Ä–µ–∞–∫—Ü–∏–π
async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    sticker = update.message.sticker

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if not update.message.reply_to_message or not update.message.reply_to_message.from_user.id == context.bot.id:
        return

    reply_text = update.message.reply_to_message.text
    if not reply_text:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [ABC123])
    import re
    match = re.search(r'\[([A-Z0-9]{6})\]', reply_text)
    if not match:
        return

    msg_id = match.group(1)
    if msg_id not in active_messages:
        await update.message.reply_text("‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
    reaction = {
        'user_id': user.id,
        'sticker_id': sticker.file_id,
        'emoji': sticker.emoji or "‚ùì"
    }
    active_messages[msg_id]['reactions'].append(reaction)

    # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ —Ä–µ–∞–∫—Ü–∏–∏ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    reaction_text = f"üí¨ *–†–µ–∞–∫—Ü–∏—è* –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ [{msg_id}]: {reaction['emoji']}"
    for chat_id in list(user_ids):
        try:
            await context.bot.send_message(chat_id=chat_id, text=reaction_text, parse_mode="Markdown")
            await context.bot.send_sticker(chat_id=chat_id, sticker=sticker.file_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ {chat_id}: {e}")

    await update.message.reply_text("‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

# –ö–æ–º–∞–Ω–¥–∞ /admin ‚Äî –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data='last10')],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ (txt)", callback_data='export')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*", reply_markup=reply_markup, parse_mode="Markdown")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'stats':
        total_users = len(user_ids)
        total_messages = len(message_logs)  # –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n",
            parse_mode="Markdown"
        )

    elif query.data == 'last10':
        last_10 = message_logs[-10:]
        text = "üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n"
        for uid, msg in last_10:
            nick = user_nicknames.get(uid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"üí¨ ‚Äî {nick}: {msg[:50]}...\n"
        await query.edit_message_text(text or "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π", parse_mode="Markdown")

    elif query.data == 'export':
        if not message_logs:
            await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        filename = f"anon_chat_log_{int(time.time())}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç ‚Äî –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π\n")
            f.write("="*40 + "\n")
            for uid, msg in message_logs:
                nick = user_nicknames.get(uid, "???")
                line = f"–û–ë–´–ß–ù–û–ï | {nick} (ID:{uid}) : {msg}\n"
                f.write(line)
        await query.message.reply_document(document=open(filename, 'rb'))
        await query.edit_message_text("‚úÖ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_message))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("üöÄ –ß–∏—Å—Ç—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç (–±–µ–∑ #—Å–µ–∫—Ä–µ—Ç) –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()